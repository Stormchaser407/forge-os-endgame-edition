./obsidian-council/core/ai_service_manager.py:    tokens_used: int
./obsidian-council/core/ai_service_manager.py:    max_tokens: Optional[int] = None
./obsidian-council/core/ai_service_manager.py:    def track_usage(self, tokens: int, cost: float):
./obsidian-council/core/ai_service_manager.py:    def __init__(self, api_key: str):
./obsidian-council/core/ai_service_manager.py:        self.client = Anthropic(api_key=api_key)
./obsidian-council/core/ai_service_manager.py:                max_tokens=context.max_tokens or 2048,
./obsidian-council/core/ai_service_manager.py:            input_tokens = response.usage.input_tokens
./obsidian-council/core/ai_service_manager.py:            output_tokens = response.usage.output_tokens
./obsidian-council/core/ai_service_manager.py:            cost = (input_tokens * 0.003 + output_tokens * 0.015) / 1000  # Per 1K tokens
./obsidian-council/core/ai_service_manager.py:            self.track_usage(input_tokens + output_tokens, cost)
./obsidian-council/core/ai_service_manager.py:                tokens_used=input_tokens + output_tokens,
./obsidian-council/core/ai_service_manager.py:                    "input_tokens": input_tokens,
./obsidian-council/core/ai_service_manager.py:                    "output_tokens": output_tokens
./obsidian-council/core/ai_service_manager.py:                max_tokens=10,
./obsidian-council/core/ai_service_manager.py:    def __init__(self, api_key: str):
./obsidian-council/core/ai_service_manager.py:        openai.api_key = api_key
./obsidian-council/core/ai_service_manager.py:                max_tokens=context.max_tokens or 2048,
./obsidian-council/core/ai_service_manager.py:            tokens_used = response.usage.total_tokens
./obsidian-council/core/ai_service_manager.py:            cost = tokens_used * 0.01 / 1000  # Approximate GPT-4 pricing
./obsidian-council/core/ai_service_manager.py:            self.track_usage(tokens_used, cost)
./obsidian-council/core/ai_service_manager.py:                tokens_used=tokens_used,
./obsidian-council/core/ai_service_manager.py:                max_tokens=5
./obsidian-council/core/ai_service_manager.py:    def __init__(self, api_key: str):
./obsidian-council/core/ai_service_manager.py:        genai.configure(api_key=api_key)
./obsidian-council/core/ai_service_manager.py:                    max_output_tokens=context.max_tokens or 2048,
./obsidian-council/core/ai_service_manager.py:            # Estimate tokens and cost (Gemini pricing varies)
./obsidian-council/core/ai_service_manager.py:            tokens_used = len(response.text.split()) * 1.3  # Rough estimate
./obsidian-council/core/ai_service_manager.py:            cost = tokens_used * 0.001 / 1000  # Approximate pricing
./obsidian-council/core/ai_service_manager.py:            self.track_usage(int(tokens_used), cost)
./obsidian-council/core/ai_service_manager.py:                tokens_used=int(tokens_used),
./obsidian-council/core/ai_service_manager.py:                        "num_predict": context.max_tokens or 2048
./obsidian-council/core/ai_service_manager.py:                            tokens_used=len(response_text.split()),
./obsidian-council/core/ai_service_manager.py:        if config.get("claude_api_key"):
./obsidian-council/core/ai_service_manager.py:            self.providers[AIProvider.CLAUDE] = ClaudeProvider(config["claude_api_key"])
./obsidian-council/core/ai_service_manager.py:        if config.get("openai_api_key"):
./obsidian-council/core/ai_service_manager.py:            self.providers[AIProvider.CHATGPT] = ChatGPTProvider(config["openai_api_key"])
./obsidian-council/core/ai_service_manager.py:        if config.get("gemini_api_key"):
./obsidian-council/core/ai_service_manager.py:            self.providers[AIProvider.GEMINI] = GeminiProvider(config["gemini_api_key"])
./obsidian-council/agents/social-media/argus.py:        if config.get("twitter_bearer_token"):
./obsidian-council/agents/social-media/argus.py:                bearer_token=config["twitter_bearer_token"],
./obsidian-council/agents/social-media/argus.py:                consumer_key=config.get("twitter_api_key"),
./obsidian-council/agents/social-media/argus.py:                consumer_secret=config.get("twitter_api_secret"),
./obsidian-council/agents/social-media/argus.py:                access_token=config.get("twitter_access_token"),
./obsidian-council/agents/social-media/argus.py:                access_token_secret=config.get("twitter_access_secret"),
./obsidian-council/agents/social-media/argus.py:                client_secret=config["reddit_client_secret"],
./obsidian-council/agents/geolocation/atlas.py:        self.mapbox_token = None
./obsidian-council/agents/geolocation/atlas.py:        if config.get("google_maps_api_key"):
./obsidian-council/agents/geolocation/atlas.py:            self.google_maps_key = config["google_maps_api_key"]
./obsidian-council/agents/geolocation/atlas.py:        if config.get("mapbox_token"):
./obsidian-council/agents/geolocation/atlas.py:            self.mapbox_token = config["mapbox_token"]
./obsidian-council/agents/identity/oracle.py:        if config.get("pimeyes_api_key"):
./obsidian-council/agents/identity/oracle.py:            self.pimeyes_api = config["pimeyes_api_key"]
./obsidian-council/agents/identity/oracle.py:        if config.get("facecheck_api_key"):
./obsidian-council/agents/identity/oracle.py:            self.facecheck_api = config["facecheck_api_key"]
./obsidian-council/agents/identity/oracle.py:        if config.get("tineye_api_key"):
./obsidian-council/agents/identity/oracle.py:            self.tineye_api = config["tineye_api_key"]
